plugins {
    id 'dev.architectury.loom' version '1.7-SNAPSHOT' apply(false)
}

subprojects {
    apply plugin: 'java'

    java {
        toolchain.languageVersion = JavaLanguageVersion.of(21)
        withSourcesJar()
        withJavadocJar()
    }

    jar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${mod_name}" }
        }
        manifest {
            attributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : mod_author,
                'Specification-Version'   : project.jar.archiveVersion,
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_author,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Timestamp'               : System.currentTimeMillis(),
                'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Built-On-Minecraft'      : minecraft_version
            ])
        }
    }

    sourcesJar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${mod_name}" }
        }
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
        it.options.getRelease().set(21)
    }

    plugins.withId('dev.architectury.loom') {
        loom {
            accessWidenerPath = project(":common").file("src/main/resources/examplemod.accesswidener")
        }   
    }

    processResources {
        var replaceProperties = [
                minecraft_version               : minecraft_version,

                neoforge_minecraft_version_range: neoforge_minecraft_version_range,
                neoforge_version                : neoforge_version,
                neoforge_version_range          : neoforge_version_range,
                loader_version_range            : loader_version_range,

                fabric_version                  : fabric_version,
                fabric_loader_version           : fabric_loader_version,
                forgified_fabric_version        : forgified_fabric_version,
                forgified_fabric_loader_version : forgified_fabric_loader_version,

                mod_id                          : mod_id,
                mod_name                        : mod_name,
                mod_version                     : findProperty('mod_version') ?: project.jar.archiveVersion,
                mod_license                     : mod_license,
                mod_author                      : mod_author,
                mod_credits                     : mod_credits,
                mod_description                 : mod_description,
                mod_url                         : mod_url,
                mod_issue_tracker_url           : mod_issue_tracker_url,
        ]
        inputs.properties replaceProperties
        filesMatching(['pack.mcmeta', 'fabric.mod.json', 'META-INF/neoforge.mods.toml', '*.mixins.json']) {
            expand replaceProperties
        }
    }

    // Disables Gradle's custom module metadata from being published to maven. The
    // metadata includes mapped dependencies which are not reasonably consumable by
    // other mod developers.
    tasks.withType(GenerateModuleMetadata).configureEach {
        enabled = false
    }
}
